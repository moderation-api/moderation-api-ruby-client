=begin
#Moderation API

#API for automated content moderation

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'cgi'

module ModerationAPI
  class QueueActionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create an action
    # Create an action.
    # @param actions_create_request [ActionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsList200ResponseInner]
    def actions_create(actions_create_request, opts = {})
      data, _status_code, _headers = actions_create_with_http_info(actions_create_request, opts)
      data
    end

    # Create an action
    # Create an action.
    # @param actions_create_request [ActionsCreateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsList200ResponseInner, Integer, Hash)>] ActionsList200ResponseInner data, response status code and response headers
    def actions_create_with_http_info(actions_create_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_create ...'
      end
      # verify the required parameter 'actions_create_request' is set
      if @api_client.config.client_side_validation && actions_create_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_create_request' when calling QueueActionsApi.actions_create"
      end
      # resource path
      local_var_path = '/actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_create_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsList200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an action
    # Delete an action and all of its webhooks.
    # @param id [String] The ID of the action to delete.
    # @param [Hash] opts the optional parameters
    # @return [ActionsDelete200Response]
    def actions_delete(id, opts = {})
      data, _status_code, _headers = actions_delete_with_http_info(id, opts)
      data
    end

    # Delete an action
    # Delete an action and all of its webhooks.
    # @param id [String] The ID of the action to delete.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsDelete200Response, Integer, Hash)>] ActionsDelete200Response data, response status code and response headers
    def actions_delete_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueueActionsApi.actions_delete"
      end
      # resource path
      local_var_path = '/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsDelete200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute an action
    # Execute an action on a set of content items in a queue.
    # @param actions_execute_request [ActionsExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsExecute200Response]
    def actions_execute(actions_execute_request, opts = {})
      data, _status_code, _headers = actions_execute_with_http_info(actions_execute_request, opts)
      data
    end

    # Execute an action
    # Execute an action on a set of content items in a queue.
    # @param actions_execute_request [ActionsExecuteRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsExecute200Response, Integer, Hash)>] ActionsExecute200Response data, response status code and response headers
    def actions_execute_with_http_info(actions_execute_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_execute ...'
      end
      # verify the required parameter 'actions_execute_request' is set
      if @api_client.config.client_side_validation && actions_execute_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_execute_request' when calling QueueActionsApi.actions_execute"
      end
      # resource path
      local_var_path = '/actions/execute'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_execute_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsExecute200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_execute",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_execute\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Execute an action
    # Execute an action on a set of content items in a queue.
    # @param action_id [String] The ID or key of the action to execute.
    # @param actions_execute_deprecated_request [ActionsExecuteDeprecatedRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsExecute200Response]
    def actions_execute_deprecated(action_id, actions_execute_deprecated_request, opts = {})
      data, _status_code, _headers = actions_execute_deprecated_with_http_info(action_id, actions_execute_deprecated_request, opts)
      data
    end

    # Execute an action
    # Execute an action on a set of content items in a queue.
    # @param action_id [String] The ID or key of the action to execute.
    # @param actions_execute_deprecated_request [ActionsExecuteDeprecatedRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsExecute200Response, Integer, Hash)>] ActionsExecute200Response data, response status code and response headers
    def actions_execute_deprecated_with_http_info(action_id, actions_execute_deprecated_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_execute_deprecated ...'
      end
      # verify the required parameter 'action_id' is set
      if @api_client.config.client_side_validation && action_id.nil?
        fail ArgumentError, "Missing the required parameter 'action_id' when calling QueueActionsApi.actions_execute_deprecated"
      end
      # verify the required parameter 'actions_execute_deprecated_request' is set
      if @api_client.config.client_side_validation && actions_execute_deprecated_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_execute_deprecated_request' when calling QueueActionsApi.actions_execute_deprecated"
      end
      # resource path
      local_var_path = '/actions/{actionId}/execute'.sub('{' + 'actionId' + '}', CGI.escape(action_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_execute_deprecated_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsExecute200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_execute_deprecated",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_execute_deprecated\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get an action
    # Get an action by ID.
    # @param id [String] The ID of the action to get.
    # @param [Hash] opts the optional parameters
    # @return [ActionsGet200Response]
    def actions_get(id, opts = {})
      data, _status_code, _headers = actions_get_with_http_info(id, opts)
      data
    end

    # Get an action
    # Get an action by ID.
    # @param id [String] The ID of the action to get.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsGet200Response, Integer, Hash)>] ActionsGet200Response data, response status code and response headers
    def actions_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueueActionsApi.actions_get"
      end
      # resource path
      local_var_path = '/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsGet200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List actions
    # List actions for the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :queue_id Only return actions available in this queue.
    # @return [Array<ActionsList200ResponseInner>]
    def actions_list(opts = {})
      data, _status_code, _headers = actions_list_with_http_info(opts)
      data
    end

    # List actions
    # List actions for the current user.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :queue_id Only return actions available in this queue.
    # @return [Array<(Array<ActionsList200ResponseInner>, Integer, Hash)>] Array<ActionsList200ResponseInner> data, response status code and response headers
    def actions_list_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_list ...'
      end
      # resource path
      local_var_path = '/actions'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'queueId'] = opts[:'queue_id'] if !opts[:'queue_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ActionsList200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an action
    # Update an action.
    # @param id [String] The ID of the action to update.
    # @param actions_update_request [ActionsUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ActionsList200ResponseInner]
    def actions_update(id, actions_update_request, opts = {})
      data, _status_code, _headers = actions_update_with_http_info(id, actions_update_request, opts)
      data
    end

    # Update an action
    # Update an action.
    # @param id [String] The ID of the action to update.
    # @param actions_update_request [ActionsUpdateRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActionsList200ResponseInner, Integer, Hash)>] ActionsList200ResponseInner data, response status code and response headers
    def actions_update_with_http_info(id, actions_update_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: QueueActionsApi.actions_update ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling QueueActionsApi.actions_update"
      end
      # verify the required parameter 'actions_update_request' is set
      if @api_client.config.client_side_validation && actions_update_request.nil?
        fail ArgumentError, "Missing the required parameter 'actions_update_request' when calling QueueActionsApi.actions_update"
      end
      # resource path
      local_var_path = '/actions/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(actions_update_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ActionsList200ResponseInner'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"QueueActionsApi.actions_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: QueueActionsApi#actions_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
