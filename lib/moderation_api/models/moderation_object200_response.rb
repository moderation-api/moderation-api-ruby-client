=begin
#Moderation API

#API for automated content moderation

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module ModerationAPI
  class ModerationObject200Response
    # Success if the request was successful
    attr_accessor :status

    attr_accessor :request

    # Whether the content was flagged by any models
    attr_accessor :flagged

    # Whether the content is using look-alike characters. Often used by spammers.
    attr_accessor :unicode_spoofing

    # Whether any entity matchers found data for the content
    attr_accessor :data_found

    # The scores of each label
    attr_accessor :labels

    # The entities found in the content
    attr_accessor :entities

    # The fields in the object and their flags
    attr_accessor :fields

    # The ID of the content. Only returned if the content was stored.
    attr_accessor :content_id

    # The wordlist entity matcher outputs if enabled in your project. Read more at https://docs.moderationapi.com/models/word
    attr_accessor :wordlists

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'status' => :'status',
        :'request' => :'request',
        :'flagged' => :'flagged',
        :'unicode_spoofing' => :'unicode_spoofing',
        :'data_found' => :'data_found',
        :'labels' => :'labels',
        :'entities' => :'entities',
        :'fields' => :'fields',
        :'content_id' => :'contentId',
        :'wordlists' => :'wordlists'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'status' => :'String',
        :'request' => :'ModerationText200ResponseAllOfRequest',
        :'flagged' => :'Boolean',
        :'unicode_spoofing' => :'Boolean',
        :'data_found' => :'Boolean',
        :'labels' => :'Array<ModerationObject200ResponseAllOfLabelsInner>',
        :'entities' => :'Array<ModerationObject200ResponseAllOfEntitiesInner>',
        :'fields' => :'Array<ModerationObject200ResponseAllOfFieldsInner>',
        :'content_id' => :'String',
        :'wordlists' => :'Array<ModerationText200ResponseAllOfWordlistsInner>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `ModerationAPI::ModerationObject200Response` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `ModerationAPI::ModerationObject200Response`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'request')
        self.request = attributes[:'request']
      else
        self.request = nil
      end

      if attributes.key?(:'flagged')
        self.flagged = attributes[:'flagged']
      else
        self.flagged = nil
      end

      if attributes.key?(:'unicode_spoofing')
        self.unicode_spoofing = attributes[:'unicode_spoofing']
      else
        self.unicode_spoofing = nil
      end

      if attributes.key?(:'data_found')
        self.data_found = attributes[:'data_found']
      else
        self.data_found = nil
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      else
        self.labels = nil
      end

      if attributes.key?(:'entities')
        if (value = attributes[:'entities']).is_a?(Array)
          self.entities = value
        end
      else
        self.entities = nil
      end

      if attributes.key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      else
        self.fields = nil
      end

      if attributes.key?(:'content_id')
        self.content_id = attributes[:'content_id']
      end

      if attributes.key?(:'wordlists')
        if (value = attributes[:'wordlists']).is_a?(Array)
          self.wordlists = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @request.nil?
        invalid_properties.push('invalid value for "request", request cannot be nil.')
      end

      if @flagged.nil?
        invalid_properties.push('invalid value for "flagged", flagged cannot be nil.')
      end

      if @unicode_spoofing.nil?
        invalid_properties.push('invalid value for "unicode_spoofing", unicode_spoofing cannot be nil.')
      end

      if @data_found.nil?
        invalid_properties.push('invalid value for "data_found", data_found cannot be nil.')
      end

      if @labels.nil?
        invalid_properties.push('invalid value for "labels", labels cannot be nil.')
      end

      if @entities.nil?
        invalid_properties.push('invalid value for "entities", entities cannot be nil.')
      end

      if @fields.nil?
        invalid_properties.push('invalid value for "fields", fields cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @status.nil?
      return false if @request.nil?
      return false if @flagged.nil?
      return false if @unicode_spoofing.nil?
      return false if @data_found.nil?
      return false if @labels.nil?
      return false if @entities.nil?
      return false if @fields.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          status == o.status &&
          request == o.request &&
          flagged == o.flagged &&
          unicode_spoofing == o.unicode_spoofing &&
          data_found == o.data_found &&
          labels == o.labels &&
          entities == o.entities &&
          fields == o.fields &&
          content_id == o.content_id &&
          wordlists == o.wordlists
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [status, request, flagged, unicode_spoofing, data_found, labels, entities, fields, content_id, wordlists].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = ModerationAPI.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
